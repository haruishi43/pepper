#!/usr/bin/env python3

from collections import defaultdict
import copy
import itertools

import numpy as np

import torch
import torch.distributed as dist
from torch.utils.data import DistributedSampler, Sampler

from ..builder import SAMPLERS


def no_index(a, b):
    assert isinstance(a, list)
    return [i for i, j in enumerate(a) if j != b]


def reorder_index(batch_indices, world_size):
    """Reorder indices of samples to align with DataParallel training.
    In this order, each process will contain all images for one ID, triplet loss
    can be computed within each process, and BatchNorm will get a stable result.
    Args:
        batch_indices: A batched indices generated by sampler
        world_size: number of process
    Returns:
    """
    mini_batchsize = len(batch_indices) // world_size
    reorder_indices = []
    for i in range(0, mini_batchsize):
        for j in range(0, world_size):
            reorder_indices.append(batch_indices[i + j * mini_batchsize])
    return reorder_indices


@SAMPLERS.register_module()
class NaiveIdentityDistributedSampler(DistributedSampler):
    """
    Randomly sample N identities, then for each identity,
    randomly sample K instances, therefore batch size is N*K.
    Args:
    - dataset (Dataset)
    - num_instances (int): number of instances per identity in a batch.
    - batch_size (int): number of examples in a batch.
    """

    def __init__(
        self,
        dataset,
        num_replicas=None,
        rank=None,
        seed=0,
        shuffle=True,
        batch_size=32,
        num_instances=4,
        round_up=True,
    ):
        super().__init__(
            dataset,
            num_replicas=num_replicas,
            rank=rank,
            shuffle=shuffle,
            seed=seed,
            drop_last=False,
        )
        assert not (batch_size > len(dataset))
        assert not (
            batch_size % num_instances
        ), "batch_size needs be divisible by num_instances"
        self.num_instances = num_instances
        self.num_pids_per_batch = batch_size // self.num_instances
        self.batch_size = batch_size
        self.round_up = round_up

        # avoid having to run pipelines
        data_infos = copy.deepcopy(
            [info["sampler_info"] for info in dataset.data_infos]
        )

        self.pid_index = defaultdict(list)
        for index, info in enumerate(data_infos):
            pid = info["pid"]
            # camid = info["camid"]
            self.pid_index[pid].append(index)

        self.pids = sorted(list(self.pid_index.keys()))
        self.num_identities = len(self.pids)

        if self.round_up and self.num_identities % self.num_pids_per_batch != 0:
            self.num_iterations = self.num_identities // self.num_pids_per_batch + 1
        else:
            self.num_iterations = self.num_identities // self.num_pids_per_batch

        self.total_size = self.num_iterations * self.num_pids_per_batch * self.num_instances

    def __iter__(self):
        available_pids = copy.deepcopy(self.pids)
        removed_pids = []

        if self.shuffle:
            g = torch.Generator()
            g.manual_seed(self.seed + self.epoch)
            pid_indices = torch.randperm(
                len(available_pids), generator=g
            ).tolist()
            available_pids = [available_pids[i] for i in pid_indices]

        batch_idxs_dict = {}
        indices = []
        for _ in range(self.num_iterations):
            batch_indices = []

            if len(available_pids) < self.num_pids_per_batch:
                # we need to add extra pids from `removed`
                num_add = self.num_pids_per_batch - len(available_pids)
                # shuffle?
                available_pids.extend(removed_pids[:num_add])

            if self.shuffle:
                selected_pids = np.random.choice(
                    available_pids, self.num_pids_per_batch, replace=False,
                ).tolist()
            else:
                selected_pids = available_pids[:self.num_pids_per_batch]

            for pid in selected_pids:
                # Register pid in batch_idxs_dict if not
                if pid not in batch_idxs_dict:
                    idxs = copy.deepcopy(self.pid_index[pid])

                    if self.shuffle:
                        if len(idxs) < self.num_instances:
                            idxs = np.random.choice(
                                idxs, size=self.num_instances, replace=True,
                            ).tolist()
                        np.random.shuffle(idxs)
                    else:
                        if len(idxs) < self.num_instances:
                            idxs = (idxs * int(self.num_instances / len(idxs) + 1))[:self.num_instances]
                    batch_idxs_dict[pid] = idxs

                avl_idxs = batch_idxs_dict[pid]
                for _ in range(self.num_instances):
                    batch_indices.append(avl_idxs.pop(0))

                if len(avl_idxs) < self.num_instances:
                    available_pids.remove(pid)
                    batch_idxs_dict.pop(pid)
                    removed_pids.append(pid)

            assert len(batch_indices) == self.batch_size
            indices += batch_indices

        assert len(indices) == self.total_size, f"indices={len(indices)}, should be {self.total_size}"

        # print("before:", len(indices), indices)
        indices = reorder_index(indices, self.num_replicas)
        # TODO: add checks?
        # print("after", len(indices), indices)
        indices = itertools.islice(indices, self.rank, None, self.num_replicas)
        return iter(indices)
